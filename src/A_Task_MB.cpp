
#include <ModbusTCP.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <math.h>
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "Arduino.h"

#include "control_pilot.hpp"
#include "AA_globals.h"
#include "ledEffect.hpp"
#include "A_Task_MB.hpp"


ModbusTCP mb;
uint16_t holdingRegisters[10] = {0};
const char *MB_LOGI = "Task_MB: ";

void A_Task_MB(void *pvParameter){
//////////////////////////////////////////////////// Setup ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Setup ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Setup ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Setup ///////////////////////////////////////////////////


    mb.server();
    mb.addHreg(0, 10); // Register 0 initialisieren mit Wert 10
    mb.addHreg(1, 20); // Register 1 initialisieren mit Wert 20
    mb.addHreg(2, 30); // Register 2 initialisieren mit Wert 30



    while (1) {
//////////////////////////////////////////////////// Loop ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Loop ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Loop ///////////////////////////////////////////////////
//////////////////////////////////////////////////// Loop ///////////////////////////////////////////////////


    mb.task();
    static uint32_t lastMillis = 0;
    if (millis() - lastMillis > 1000) { // Alle 1 Sekunde
        lastMillis = millis();
        uint16_t value = mb.Hreg(0);  // Register 0 auslesen
        mb.Hreg(0, value + 1);       // Wert um 1 erh√∂hen
     //   ESP_LOGI(MB_LOGI, "Register 0: %d", value + 1);
    }
      
        vTaskDelay(100 / portTICK_PERIOD_MS); // Adjusted delay
    }
}
